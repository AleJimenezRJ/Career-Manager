// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Enterprise;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Industry;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Opportunity;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Recruitment;
using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkLife;
namespace UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation
{
    /// <summary>
    /// Builds and executes requests for operations under \work-information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WorkInformationRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The enterprise property</summary>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Enterprise.EnterpriseRequestBuilder Enterprise
        {
            get => new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Enterprise.EnterpriseRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The industry property</summary>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Industry.IndustryRequestBuilder Industry
        {
            get => new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Industry.IndustryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The opportunity property</summary>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Opportunity.OpportunityRequestBuilder Opportunity
        {
            get => new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Opportunity.OpportunityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The recruitment property</summary>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Recruitment.RecruitmentRequestBuilder Recruitment
        {
            get => new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Recruitment.RecruitmentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The workLife property</summary>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkLife.WorkLifeRequestBuilder WorkLife
        {
            get => new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkLife.WorkLifeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.workInformation.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder"/></returns>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("internalWorkInformationId", position);
                return new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.workInformation.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("internalWorkInformationId", position);
                return new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.Item.WithInternalWorkInformationItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkInformationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WorkInformationRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/work-information", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkInformationRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WorkInformationRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/work-information", rawUrl)
        {
        }
        /// <returns>A <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.GetWorkInformationResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="List<global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.Error>">When receiving a 400 status code</exception>
        /// <exception cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.Error">When receiving a 404 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.GetWorkInformationResponse?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.GetWorkInformationResponse> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.Error.CreateFromDiscriminatorValue },
                { "404", global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.GetWorkInformationResponse>(requestInfo, global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.Models.GetWorkInformationResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkInformationRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkInformationRequestBuilder WithUrl(string rawUrl)
        {
            return new global::UCR.ECCI.IS.VRCampus.Frontend.Blazor.Infrastructure.Kiota.WorkInformation.WorkInformationRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WorkInformationRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
