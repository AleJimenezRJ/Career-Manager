using UCR.ECCI.IS.VRCampus.Frontend.Blazor.Domain.ValueObjects;

namespace UCR.ECCI.IS.VRCampus.Frontend.Blazor.Domain.Entities;

/// <summary>
/// Represents a career, including its academic details, modality, scholarship information, and associated work-related
/// data.
/// </summary>
/// <remarks>The <see cref="Career"/> class provides a comprehensive representation of a career, including
/// properties such as its name, description,  number of semesters, modality, degree title, scholarship amount, and
/// whether it belongs to STEAM fields. It also includes a collection  of work-related information entries associated
/// with the career.  This class supports two constructors: one for initializing a new career with an autogenerated
/// internal ID (typically used when adding  a new career to a database), and another for reconstructing an existing
/// career with all properties, including the internal ID.</remarks>
public class Career
{
    /// <summary>
    /// Represents a collection of work-related information.
    /// </summary>
    /// <remarks>This field is used internally to store details about work information. It is a read-only list
    /// and cannot be modified directly.</remarks>
    private readonly List<WorkInformation> _workInformations;

    /// <summary>
    /// Gets or sets the internal identifier of the career. This is the primary key in the database.
    /// </summary>
    public int? CareerInternalId { get; set; }

    /// <summary>
    /// Gets or sets the name of the career.
    /// </summary>
    public EntityName? Name { get; set; }

    /// <summary>
    /// Gets or sets the description of the career.
    /// </summary>
    public Description? Description { get; set; }

    /// <summary>
    /// Gets or sets the number of semesters to complete the career.
    /// </summary>
    public SemestersNumber? SemestersNumber { get; set; }

    /// <summary>
    /// Gets or sets the modality of the career (Presential, Virtual, or Hybrid).
    /// </summary>
    public Modality? Modality { get; set; }

    /// <summary>
    /// Gets or sets the academic degree title awarded upon graduation (e.g., Bachelor, Master).
    /// </summary>
    public DegreeTitle? DegreeTitle { get; set; }

    /// <summary>
    /// Gets or sets the scholarship amount awarded to the student.
    /// </summary>
    public double? Scholarship { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the current career belongs to the STEAM fields (Science, Technology, Engineering, Arts, Mathematics).
    /// </summary>
    public bool? IsSteam { get; set; }

    /// <summary>
    /// Gets a read-only collection of work information entries.
    /// </summary>
    public IReadOnlyCollection<WorkInformation> WorkInformations => _workInformations.AsReadOnly();

    /// <summary>
    /// Initializes a new instance of the <see cref="Career"/> class with all properties including internal ID.
    /// Useful when reconstructing an entity from a data store.
    /// </summary>
    /// <param name="careerInternalId">The internal identifier for the career.</param>
    /// <param name="name">The name of the career.</param>
    /// <param name="description">A description of the career.</param>
    /// <param name="semestersNumber">The number of semesters  to complete the career.</param>
    /// <param name="modality">The modality of the career.</param>
    /// <param name="degreeTitle">The degree title awarded after graduation.</param>
    /// <param name="scholarship"> The scholarship amount awarded to the student.</param>
    /// <param name="workInformation"> A collection of work information entries associated with the career.</param>
    public Career(int? careerInternalId, EntityName? name, Description? description, SemestersNumber? semestersNumber, Modality? modality, DegreeTitle? degreeTitle, IEnumerable<WorkInformation> workInformation, double? scholarship, bool? isSteam)
    {
        CareerInternalId = careerInternalId;
        Name = name;
        Description = description;
        SemestersNumber = semestersNumber;
        Modality = modality;
        DegreeTitle = degreeTitle;
        Scholarship = scholarship;
        IsSteam = isSteam;
        _workInformations = workInformation.ToList();
    }

    public Career(int? careerInternalId, EntityName? name, Description? description, SemestersNumber? semestersNumber, Modality? modality, DegreeTitle? degreeTitle, double? scholarship, bool? isSteam)
    {
        CareerInternalId = careerInternalId;
        Name = name;
        Description = description;
        SemestersNumber = semestersNumber;
        Modality = modality;
        DegreeTitle = degreeTitle;
        Scholarship = scholarship;
        IsSteam = isSteam;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="Career"/> class without specifying the internal Id.
    /// This because when adding a new career, the id is autogenerated by the database.
    /// </summary>
    /// <param name="name">The name of the career.</param>
    /// <param name="description">A description of the career.</param>
    /// <param name="semestersNumber">The number of semesters  to complete the career.</param>
    /// <param name="modality">The modality of the career.</param>
    /// <param name="degreeTitle">The degree title awarded after graduation.</param>
    public Career(EntityName? name, Description? description, SemestersNumber? semestersNumber, Modality? modality, DegreeTitle? degreeTitle, bool? isSteam)
    {
        Name = name;
        Description = description;
        SemestersNumber = semestersNumber;
        Modality = modality;
        DegreeTitle = degreeTitle;
        IsSteam = isSteam;
        _workInformations = new List<WorkInformation>();
    }

    /// <summary>
    /// Private constructor for EF Core.
    /// </summary>
    private Career()
    {
        _workInformations = new List<WorkInformation>();
    }
}
